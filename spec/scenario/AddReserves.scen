Test "Add all reserves and verify effects"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX sZRX
    Mint Geoff 50e18 sZRX
    Assert Equal (Erc20 sZRX TokenBalance Geoff) (Exactly 500e8) -- 50e18 / 1e9
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (SToken sZRX ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX sZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 ZRX TokenBalance sZRX) (Exactly 55e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 sZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (SToken sZRX Reserves) (Exactly 1e18)
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (SToken sZRX ExchangeRate) (Exactly 1.08e9)
    -- Now, let's pull out add some our reserves (1e18)
    Erc20 ZRX Faucet Root 3e18
    From Root (Erc20 ZRX Approve sZRX 6e18)
    AddReserves 1e18 sZRX
    Assert Equal (Erc20 ZRX TokenBalance sZRX) (Exactly 56e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 2e18)
    Assert Equal (Erc20 sZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (SToken sZRX Reserves) (Exactly 2e18)
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.0e18+0.0e18-0.0e18)/500.0e8
    -- unchanged
    Assert Equal (SToken sZRX ExchangeRate) (Exactly 1.08e9)

Test "Remove and re add reserves and remove again"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX sZRX
    Mint Geoff 50e18 sZRX
    Assert Equal (Erc20 sZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (SToken sZRX ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX sZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 ZRX TokenBalance sZRX) (Exactly 55e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 sZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (SToken sZRX Reserves) (Exactly 1e18)
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Assert Equal (SToken sZRX ExchangeRate) (Exactly 1.08e9)
    -- Now, let's pull out half of reserves (0.5e18)
    ReduceReserves 0.5e18 sZRX
    Assert Equal (Erc20 ZRX TokenBalance sZRX) (Exactly 54.5e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0.5e18)
    Assert Equal (Erc20 sZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (SToken sZRX Reserves) (Exactly 0.5e18)
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.5e18+0.5e18-0.0e18)/500.0e8
    Assert Equal (SToken sZRX ExchangeRate) (Exactly 1.08e9)
    -- Now, let's put back reserves (1e18)
    From Root (Erc20 ZRX Approve sZRX 6e18)
    AddReserves 0.5e18 sZRX
    Assert Equal (Erc20 ZRX TokenBalance sZRX) (Exactly 55e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 0e18)
    Assert Equal (Erc20 sZRX TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (SToken sZRX Reserves) (Exactly 1e18)
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) (Exactly 54e18)
    -- (54.5e18+0.5e18-0.0e18)/500.0e8
    Assert Equal (SToken sZRX ExchangeRate) (Exactly 1.08e9)

Test "add reserves to empty contract"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Assert Equal (SToken sZRX ExchangeRate) (Exactly 1e9)
    Erc20 ZRX Faucet Root 3e18
    From Root (Erc20 ZRX Approve sZRX 6e18)
    AddReserves 2e18 sZRX
    Assert Equal (Erc20 ZRX TokenBalance sZRX) (Exactly 2e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 1e18)
    Assert Equal (SToken sZRX Reserves) (Exactly 2e18)
    -- unchanged
    Assert Equal (SToken sZRX ExchangeRate) (Exactly 1e9)

Test "add reserves failures"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Assert Equal (SToken sZRX ExchangeRate) (Exactly 1e9)
    Assert Equal (SToken sZRX Reserves) (Exactly 0e18)
    Erc20 ZRX Faucet Root 2e18
    AllowFailures
    AddReserves 2e18 sZRX
    Assert Revert "revert Insufficient allowance"
    Assert Equal (Erc20 ZRX TokenBalance sZRX) (Exactly 0e18)
    Assert Equal (Erc20 ZRX TokenBalance Root) (Exactly 2e18)
    Assert Equal (SToken sZRX Reserves) (Exactly 0e18)
    -- unchanged
    Assert Equal (SToken sZRX ExchangeRate) (Exactly 1e9)

Test "Add reserves WBTC when paused"
    NewComptroller
    ListedSToken WBTC sWBTC initialExchangeRate:1e9 tokenType:WBTC
    Prep Geoff 50e18 WBTC sWBTC
    Mint Geoff 50e18 sWBTC
    Assert Equal (Erc20 sWBTC TokenBalance Geoff) (Exactly 500e8)
    Assert Equal (SToken sWBTC UnderlyingBalance Geoff) (Exactly 50e18)
    Assert Equal (SToken sWBTC ExchangeRate) (Exactly 1e9)
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest WBTC sWBTC 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .0001% interest for 500000 blocks, or 50% of the principal (10e18),
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all suppliers. We just have one, so
    --   let's check that account is given correct new balance.
    Erc20 WBTC Faucet Root 3e18
    Invariant Remains (Erc20 WBTC TokenBalance sWBTC) (Exactly 55e18)
    Invariant Remains (Erc20 WBTC TokenBalance Root) (Exactly 3e18)
    Invariant Remains (Erc20 sWBTC TokenBalance Geoff) (Exactly 500e8)
    Invariant Remains (SToken sWBTC Reserves) (Exactly 1e18)
    Invariant Remains (SToken sWBTC UnderlyingBalance Geoff) (Exactly 54e18)
    -- (55.0e18+0.0e18-1.0e18)/500.0e8
    Invariant Remains (SToken sWBTC ExchangeRate) (Exactly 1.08e9)
    From Root (Erc20 WBTC Approve sWBTC 6e18)
    Erc20 WBTC Pause
    AllowFailures
    AddReserves 1e18 sWBTC
    Assert Revert
