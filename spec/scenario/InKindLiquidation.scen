
Macro InKindBorrow borrowAmount borrowRate user=Geoff borrowPrice=1.0 mintAmount=100e18 giveAmount=0e18 borrowTokenType=Standard
    PricedComptroller
    Comptroller LiquidationIncentive 1.1
    NewSToken BAT sBAT borrowRate 2e9 8 borrowTokenType -- note: cannot use macros with named args right now
    Give sBAT giveAmount BAT -- Faucet some bat
    PriceOracle SetPrice sBAT borrowPrice
    Support sBAT collateralFactor:0.5
    Prep user mintAmount BAT sBAT
    Mint user mintAmount sBAT
    EnterMarkets user sBAT
    Borrow user borrowAmount sBAT

Test "Insufficient in-kind shortfall"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (SToken sBAT BorrowBalance Geoff) 1e18
    Assert Equal (SToken sBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 51e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 sBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 19600000 Blocks -- 1e18 * (1 + 19600000 * 0.000005)
    AccrueInterest sBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (SToken sBAT BorrowBalanceStored Geoff) 99e18
    Assert Equal (SToken sBAT TotalBorrows) 99e18
    -- Check user liquidity and verify equals 0
    Assert Equal (Comptroller Liquidity Geoff) 0e18 -- ( ( 1.0 * ( 100e18 + 98e18 ) * 0.5 ) - ( ( 98 + 1 ) * 1e18 ) ) / 1e18
    -- At exactly zero, should not be able to liquidate
    Prep Torrey 10e18 BAT sBAT
    AllowFailures
    Liquidate Torrey "->" Geoff 10e18 sBAT "Seizing" sBAT
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION INSUFFICIENT_SHORTFALL

Test "Cannot self-in-kind-liquidate"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (SToken sBAT BorrowBalance Geoff) 1e18
    Assert Equal (SToken sBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 51e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 sBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest sBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (SToken sBAT BorrowBalanceStored Geoff) 101e18
    Assert Equal (SToken sBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Geoff 10e18 BAT sBAT
    AllowFailures
    Liquidate Geoff "->" Geoff 2e18 sBAT "Seizing" sBAT
    Assert Failure INVALID_ACCOUNT_PAIR LIQUIDATE_LIQUIDATOR_IS_BORROWER

Test "Liqidate in-kind beyond max close"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (SToken sBAT BorrowBalance Geoff) 1e18
    Assert Equal (SToken sBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 51e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 sBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest sBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (SToken sBAT BorrowBalanceStored Geoff) 101e18
    Assert Equal (SToken sBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 20e18 BAT sBAT
    AllowFailures
    Liquidate Torrey "->" Geoff 20e18 sBAT "Seizing" sBAT
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION TOO_MUCH_REPAY

Test "Proper In-Kind Liquidation"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (SToken sBAT BorrowBalance Geoff) 1e18
    Assert Equal (SToken sBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 sBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest sBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (SToken sBAT BorrowBalanceStored Geoff) 101e18
    Assert Equal (SToken sBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18 -- ( ( 1.0 * ( 100e18 + 100e18 ) * 0.5 ) - ( 101 * 1e18 ) ) / 1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 2e18 BAT sBAT
    --
    -- Let's check how values start before liquidation
    -- Note: we're going to be some-what exhausive in what we check
    Invariant Remains (Erc20 BAT TokenBalance Geoff) 1e18 -- all was minted, this is what was borrowed
    Assert Equal (Erc20 BAT TokenBalance Torrey) 2e18 -- from prep above
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18 -- from minting minus 1e18 lent to geoff
    Assert Equal (Erc20 sBAT TokenBalance Geoff) 50e9 -- from minting
    Assert Equal (Erc20 sBAT TokenBalance Torrey) 0e9 -- never had any
    Invariant Remains (Erc20 BAT TokenBalance Geoff) 1e18 -- original amount borrowed
    Assert Equal (SToken sBAT BorrowBalanceStored Geoff) 101e18 -- all that interest
    Assert Equal (SToken sBAT TotalBorrows) 101e18 -- all those borrowers
    Assert Equal (SToken sBAT ExchangeRate) 4e9 --- XXX: Verify this
    -- Do the liquidation
    Liquidate Torrey "->" Geoff 2e18 sBAT "Seizing" sBAT -- should now take twice as much collateral
    --
    -- And see what they are now
    Assert Equal (SToken sBAT ExchangeRate) 4e9 --- XXX: Verify this
     -- effective liquidation incentive after deducting protocolSeizeShare is 1.1 * (1-.028) = 1.0692
    Assert Equal (Erc20 sBAT TokenBalance Geoff) 49.45e9 -- 1:1 -> 1 x 2e18 x 1.0692 รท 4e9 [exchange rate] = 0.55e9 -> Torrey
    Assert Equal (Erc20 sBAT TokenBalance Torrey) 5.225e8 -- didn't have any beforehand XXX
    Assert Equal (Erc20 BAT TokenBalance Torrey) 0e18 -- repaid
    Assert Equal (Erc20 BAT TokenBalance sBAT) 101e18 -- had 100e18, lent 1e18 to geoff, repaid 2
    Assert Equal (SToken sBAT BorrowBalanceStored Geoff) 99e18 -- less closed amount
    Assert Equal (SToken sBAT TotalBorrows) 99e18 --
    -- Prices are 1:1 and collateral factor is 0.5
    -- User now has 49.45e9 outstanding supply (yielding 98.9 borrowing capacity due
    -- to the collateral factor (0.5) and exchange rate (4e9)).
    -- The user also has a 99e18 borrow outstanding which is weighted 1:1.
    -- Thus the liquidity is (98.9-99)e18 or -0.1e18.
    Assert Equal (Comptroller Liquidity Geoff) -0.1e18

Test "Liquidate exactly zero"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (SToken sBAT BorrowBalance Geoff) 1e18
    Assert Equal (SToken sBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 sBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest sBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (SToken sBAT BorrowBalanceStored Geoff) 101e18
    Invariant Remains (SToken sBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Invariant Remains (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT sBAT
    AllowFailures
    Liquidate Torrey "->" Geoff 0e18 sBAT "Seizing" sBAT
    Assert Failure INVALID_CLOSE_AMOUNT_REQUESTED LIQUIDATE_CLOSE_AMOUNT_IS_ZERO

Test "When price oracle for collateral token is zero"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (SToken sBAT BorrowBalance Geoff) 1e18
    Assert Equal (SToken sBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 sBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest sBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (SToken sBAT BorrowBalanceStored Geoff) 101e18
    Invariant Remains (SToken sBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT sBAT
    PriceOracle SetPrice sBAT 0
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 sBAT "Seizing" sBAT
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION PRICE_ERROR

Test "When price oracle for collateral token is whack"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (SToken sBAT BorrowBalance Geoff) 1e18
    Assert Equal (SToken sBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 sBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest sBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (SToken sBAT BorrowBalanceStored Geoff) 101e18
    Invariant Remains (SToken sBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT sBAT
    PriceOracle SetPrice sBAT UInt256Max
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 sBAT "Seizing" sBAT
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION MATH_ERROR

Test "When repay borrow fails"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (SToken sBAT BorrowBalance Geoff) 1e18
    Assert Equal (SToken sBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 sBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest sBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (SToken sBAT BorrowBalanceStored Geoff) 101e18
    Invariant Remains (SToken sBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Invariant Remains (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT sBAT allowanceAmount:0.1e18
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 sBAT "Seizing" sBAT
    Assert Revert "revert Insufficient allowance"

Test "Proper liquidation of paused WBTC as collateral"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005 borrowTokenType:WBTC
    Assert Equal (SToken sBAT BorrowBalance Geoff) 1e18
    Assert Equal (SToken sBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 sBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest sBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (SToken sBAT BorrowBalanceStored Geoff) 101e18
    Assert Equal (SToken sBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18 -- recheck
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 2e18 BAT sBAT
    --
    -- Let's check how values start before liquidation
    -- Note: we're going to be some-what exhausive in what we check
    Invariant Remains (Erc20 BAT TokenBalance Geoff) 1e18 -- all was minted, this is what was borrowed
    Assert Equal (Erc20 BAT TokenBalance Torrey) 2e18 -- from prep above
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18 -- from minting minus 1e18 lent to geoff
    Assert Equal (Erc20 sBAT TokenBalance Geoff) 50e9 -- from minting
    Assert Equal (Erc20 sBAT TokenBalance Torrey) 0e9 -- never had any
    Invariant Remains (Erc20 BAT TokenBalance Geoff) 1e18 -- original amount borrowed
    Assert Equal (SToken sBAT BorrowBalanceStored Geoff) 101e18 -- all that interest
    Assert Equal (SToken sBAT TotalBorrows) 101e18 -- all those borrowers
    Assert Equal (SToken sBAT ExchangeRate) 4e9 --- XXX: Verify this
    --
    -- Pause "WBTC"
    Erc20 BAT Pause -- Actually a WBTC token
    -- Do the liquidation
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 sBAT "Seizing" sBAT -- should now take twice as much collateral
    Assert Revert -- Reverts since we can't transfer the BAT in due to pause

Test "When seize not allowed due to unlisted collateral"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (SToken sBAT BorrowBalance Geoff) 1e18
    Assert Equal (SToken sBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 sBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest sBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (SToken sBAT BorrowBalanceStored Geoff) 101e18
    Invariant Remains (SToken sBAT TotalBorrows) 101e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT sBAT
    Comptroller UnList sBAT -- Mock unlist collateral
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 sBAT "Seizing" sBAT
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION MARKET_NOT_LISTED

Test "When seize not allowed due to unlisted borrow"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (SToken sBAT BorrowBalance Geoff) 1e18
    Assert Equal (SToken sBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 sBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest sBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (SToken sBAT BorrowBalanceStored Geoff) 101e18
    Invariant Remains (SToken sBAT TotalBorrows) 101e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 10e18 BAT sBAT
    Comptroller UnList sBAT -- Mock unlist borrow
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 sBAT "Seizing" sBAT
    Assert Failure COMPTROLLER_REJECTION LIQUIDATE_COMPTROLLER_REJECTION MARKET_NOT_LISTED

Test "When there's insufficient collateral"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Comptroller SetCloseFactor 0.9
    Comptroller LiquidationIncentive 1.5
    Assert Equal (SToken sBAT BorrowBalance Geoff) 1e18
    Assert Equal (SToken sBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 sBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 200000000 Blocks -- 1e18 * (1 + 200000000 * 0.000005)
    AccrueInterest sBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Invariant Remains (SToken sBAT BorrowBalanceStored Geoff) 1001e18
    Invariant Remains (SToken sBAT TotalBorrows) 1001e18
    Comptroller SetCollateralFactor sBAT 0
    -- Check user liquidity and verify < 0
    Invariant Remains (Comptroller Liquidity Geoff) -1001e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 900e18 BAT sBAT
    AllowFailures
    Liquidate Torrey "->" Geoff 900e18 sBAT "Seizing" sBAT
    Assert Revert "revert LIQUIDATE_SEIZE_TOO_MUCH"

Test "when seize is paused"
    InKindBorrow borrowAmount:1e18 borrowRate:0.000005
    Assert Equal (SToken sBAT BorrowBalance Geoff) 1e18
    Assert Equal (SToken sBAT TotalBorrows) 1e18
    Assert Equal (Erc20 BAT TokenBalance Geoff) 1e18
    Assert Equal (Erc20 BAT TokenBalance sBAT) 99e18
    Assert Equal (Comptroller Liquidity Geoff) 49e18 -- ( ( 1.0 * 100e18 * 0.5 ) - ( 1.0 * 1e18 ) ) / 1e18
    -- Prices are 1:1 (in-kind) and collateral factor is 0.5,
    -- thus supplying 100e18 sBAT gives the user 50e18
    -- capacity of BAT. User only borrowed 1BAT, but after
    -- a lot blocks at a 0.0005% interest rate, he'll be
    -- underwater. Note: with a reserve rate of zero, that
    -- interest will be paid back to himself as supply
    -- but that will be discounted by 50% by the collateral factor.
    -- Thus, we will need to accumulate for twice as many blocks
    -- to end up where we'd usually be underwater
    FastForward 20000000 Blocks -- 1e18 * (1 + 20000000 * 0.000005)
    AccrueInterest sBAT -- Note: we have to accrue interest
                        -- since it's not automatic for liquidity
    Assert Equal (SToken sBAT BorrowBalanceStored Geoff) 101e18
    Assert Equal (SToken sBAT TotalBorrows) 101e18
    -- Check user liquidity and verify < 0
    Assert Equal (Comptroller Liquidity Geoff) -1e18
    -- Okay, so we should be able to liquidate, so let's do that.
    Prep Torrey 2e18 BAT sBAT
    Comptroller SetPauseGuardian Coburn
    From Coburn (Comptroller SetProtocolPaused True)
    AllowFailures
    Liquidate Torrey "->" Geoff 2e18 sBAT "Seizing" sBAT
    Assert Revert "revert protocol is paused"
    -- unpause and check correct values
    Invariant Success
    Comptroller SetProtocolPaused False
    Liquidate Torrey "->" Geoff 2e18 sBAT "Seizing" sBAT
