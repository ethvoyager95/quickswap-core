-- Redeem Tests

Test "Mint then Redeem All"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX sZRX
    Mint Geoff 50e18 sZRX
    -- Check current affairs
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (SToken sZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 500e8 sZRX
    Assert Equal (Erc20 sZRX TokenBalance Geoff) Zero
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 70e18

Test "Mint, Enter and then Redeem All"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX sZRX
    Mint Geoff 50e18 sZRX
    -- Check current affairs
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (SToken sZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff sZRX
    Redeem Geoff 500e8 sZRX
    Assert Equal (Erc20 sZRX TokenBalance Geoff) Zero
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 70e18

Test "Mint then Redeem Part"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX sZRX
    Mint Geoff 50e18 sZRX
    -- Check current affairs
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (SToken sZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 250e8 sZRX
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 250e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 45e18

Test "Mint then Redeem Too Much"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX sZRX
    Mint Geoff 50e18 sZRX
    -- Check and hold static
    Invariant Static (SToken sZRX ExchangeRateStored)
    Invariant Remains (Erc20 sZRX TokenBalance Geoff) 500e8
    Invariant Remains (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Now redeem after some time
    FastForward 2 Blocks
    AllowFailures
    Redeem Geoff 501e8 sZRX
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3"

Test "Mint then Redeem Zero"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX sZRX
    Mint Geoff 50e18 sZRX
    -- Check current affairs
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Any other good invariants?
    Invariant Static (SToken sZRX ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Redeem Geoff 0e18 sZRX
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 500e8
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 20e18

Test "Mint then redeem with interest - no reserves"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Invariant Remains (SToken sZRX Reserves) Zero
    Prep Geoff 50e18 ZRX sZRX
    Mint Geoff 50e18 sZRX
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 500e8
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) 50e18
    Assert Equal (SToken sZRX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX sZRX 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all suppliers, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 500e8
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) 55e18
    Assert Equal (SToken sZRX ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Redeem Geoff 500e8 sZRX
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 55e18
    Assert Equal (Erc20 ZRX TokenBalance sZRX) 0e18
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 0e8
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) 0e18
    Assert Equal (SToken sZRX ExchangeRate) 1e9

Test "Mint then redeem part with interest - no reserves"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Invariant Remains (SToken sZRX Reserves) Zero
    Prep Geoff 50e18 ZRX sZRX
    Mint Geoff 50e18 sZRX
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 500e8
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) 50e18
    Assert Equal (SToken sZRX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX sZRX 10e18 5e18 interestRate:0.000001 blocks:500000
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all suppliers, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 500e8
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) 55e18
    Assert Equal (SToken sZRX ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Redeem Geoff 499e8 sZRX
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 1e8
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) 0.11e18
    Assert Equal (SToken sZRX ExchangeRate) 1.1e9

Test "Mint then redeem with reserves and interest"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX sZRX
    Mint Geoff 50e18 sZRX
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 500e8
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) 50e18
    Assert Equal (SToken sZRX ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX sZRX 10e18 5e18 interestRate:0.000001 blocks:500000 reserveRate:0.2
    -- We've accrued .001% interest for 500000 blocks, or 50% of the principal,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all holders. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 500e8
    Assert Equal (SToken sZRX Reserves) 1e18
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) 54e18
    -- 55e18 + 0e18 - 1e18 / 500
    Assert Equal (SToken sZRX ExchangeRate) 1.08e9
    -- Now redeem all with interest
    Redeem Geoff 500e8 sZRX
    Assert Equal (Erc20 ZRX TokenBalance Geoff) 54e18
    Assert Equal (Erc20 ZRX TokenBalance sZRX) 1e18
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 0e8
    Assert Equal (SToken sZRX Reserves) 1e18
    Assert Equal (SToken sZRX UnderlyingBalance Geoff) 0e18
    Assert Equal (SToken sZRX ExchangeRate) 1e9

Test "Two users Mint, one redeems"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Prep Geoff Some ZRX sZRX
    Prep Torrey Some ZRX sZRX
    Mint Geoff 2e18 sZRX
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 20e8
    Assert Equal (Erc20 sZRX TotalSupply) 20e8
    Mint Torrey 2e18 sZRX
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 20e8
    Assert Equal (Erc20 sZRX TokenBalance Torrey) 20e8
    Assert Equal (Erc20 sZRX TotalSupply) 40e8
    Redeem Torrey 10e8 sZRX
    Assert Equal (Erc20 sZRX TokenBalance Geoff) 20e8
    Assert Equal (Erc20 sZRX TokenBalance Torrey) 10e8
    Assert Equal (Erc20 sZRX TotalSupply) 30e8

Test "Redeem transfer out fails"
    NewComptroller
    ListedSToken EVL sEVL initialExchangeRate:1e9 tokenType:Evil
    Erc20 EVL SetFail False
    Prep Geoff 70e18 EVL sEVL
    Mint Geoff 50e18 sEVL
    -- Check current affairs
    Invariant Remains (Erc20 sEVL TokenBalance Geoff) 500e8
    Invariant Remains (Erc20 EVL TokenBalance Geoff) 20e18
    Invariant Static (SToken sEVL ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Erc20 EVL SetFail True
    AllowFailures
    Redeem Geoff 500e8 sEVL
    Assert Revert "revert TOKEN_TRANSFER_OUT_FAILED"

Test "Mint, Enter, then Redeem Too Much (collateral factor: 0)"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Prep Geoff 70e18 ZRX sZRX
    Mint Geoff 50e18 sZRX
    -- Check and hold static
    Invariant Static (SToken sZRX ExchangeRateStored)
    Invariant Remains (Erc20 sZRX TokenBalance Geoff) 500e8
    Invariant Remains (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff sZRX
    AllowFailures
    Redeem Geoff 501e8 sZRX
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3"

Test "Mint, Enter, then Redeem Too Much (collateral factor: 0.1)"
    NewComptroller
    ListedSToken ZRX sZRX initialExchangeRate:1e9
    Comptroller SetCollateralFactor sZRX 0.1
    Prep Geoff 70e18 ZRX sZRX
    Mint Geoff 50e18 sZRX
    -- Check and hold static
    Invariant Static (SToken sZRX ExchangeRateStored)
    Invariant Remains (Erc20 sZRX TokenBalance Geoff) 500e8
    Invariant Remains (Erc20 ZRX TokenBalance Geoff) 20e18
    -- Now redeem after some time
    FastForward 2 Blocks
    EnterMarkets Geoff sZRX
    AllowFailures
    Redeem Geoff 501e8 sZRX
    Assert Failure COMPTROLLER_REJECTION REDEEM_COMPTROLLER_REJECTION INSUFFICIENT_LIQUIDITY
