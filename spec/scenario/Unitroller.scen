
Test "Standard Upgrade"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    -- Upgrade to G1
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1)
    ListedSToken ZRX sZRX
    ListedSToken DAI sDAI
    -- Upgrade to G2
    ComptrollerImpl Deploy StandardG2 StandardComptrollerG2
    Unitroller SetPendingImpl StandardComptrollerG2
    ComptrollerImpl StandardComptrollerG2 BecomeG2
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address StandardComptrollerG2)
    -- Upgrade to G3
    ComptrollerImpl Deploy ScenarioG3 ScenComptrollerG3
    Unitroller SetPendingImpl ScenComptrollerG3
    ComptrollerImpl ScenComptrollerG3 BecomeG3 1e18 [sZRX sDAI]
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG3)

Test "Standard Upgrade, then downgrade then upgrade again"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    -- Upgrade to G1
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1)
    ListedSToken ZRX sZRX
    ListedSToken DAI sDAI
    -- Upgrade to G2
    ComptrollerImpl Deploy StandardG2 ComptrollerG2
    Unitroller SetPendingImpl ComptrollerG2
    ComptrollerImpl ComptrollerG2 BecomeG2
    Comptroller SetPauseGuardian Coburn
    Assert Equal (Comptroller PauseGuardian) (Address Coburn)
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ComptrollerG2)
    -- Upgrade to G3
    ComptrollerImpl Deploy ScenarioG3 ScenComptrollerG3
    Unitroller SetPendingImpl ScenComptrollerG3
    ComptrollerImpl ScenComptrollerG3 BecomeG3 1e18 [sZRX sDAI]
    Assert Equal (Comptroller PauseGuardian) (Address Coburn)
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG3)
    -- Downgrade to G2
    Unitroller SetPendingImpl ComptrollerG2
    ComptrollerImpl ComptrollerG2 BecomeG2
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ComptrollerG2)
    -- Upgrade to G3 again
    Unitroller SetPendingImpl ScenComptrollerG3
    ComptrollerImpl ScenComptrollerG3 BecomeG3 1e18 []
    Assert Equal (Comptroller GetStrikeMarkets) [(Address sZRX) (Address sDAI)]
    Assert Equal (Comptroller PauseGuardian) (Address Coburn)
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG3)

Test "Once become, can become again"
    -- TODO: See why ABI is broken here
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1)
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1_2
    Unitroller SetPendingImpl ScenComptrollerG1_2
    ComptrollerImpl ScenComptrollerG1_2 BecomeG1 (PriceOracle Address) 0.4 40
    Assert Equal (Comptroller CloseFactor) 0.4
    Assert Equal (Comptroller MaxAssets) 40
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1_2)

--G1 recome
Test "Recome has default values"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 Recome
    Assert Equal (Comptroller CloseFactor) 0.0
    Assert Equal (Comptroller MaxAssets) 0
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1)

--G1 bork
Test "Bork and unbork"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    ComptrollerImpl Deploy ScenarioG1 ScenComptrollerG1
    -- Set a normal impl
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1)
    -- Now move to a borked one that's bad
    ComptrollerImpl Deploy Borked MyBork
    Unitroller SetPendingImpl MyBork
    ComptrollerImpl MyBork BecomeG1 (PriceOracle Address) 0.4 40
    Assert ReadRevert (Comptroller CloseFactor) "revert"
    Assert Equal (Comptroller Implementation) (Address MyBork)
    -- Now change back to the first good one
    Unitroller SetPendingImpl ScenComptrollerG1
    ComptrollerImpl ScenComptrollerG1 Recome
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (Comptroller Implementation) (Address ScenComptrollerG1)

Macro CheckUnitrollerStorage implementation
    -- Admin; 0
    Assert Equal (Comptroller Admin) (Address Root)
    Assert Equal (StorageAt Comptroller 0 0 "address") (Address Root)
    -- PendingAdmin; 1
    Assert Equal (Comptroller PendingAdmin) (Address Coburn)
    Assert Equal (StorageAt Comptroller 1 0 "address") (Address Coburn)
    -- ComptrollerImplementation; 2
    Assert Equal (Unitroller Implementation) implementation
    Assert Equal (StorageAt Comptroller 2 0 "address") implementation
    -- PendingComptrollerImplementation; 3
    -- check as number since casting address 0 is not defined
    Assert Equal (StorageAt Comptroller 3 0 "number") 0

Macro CheckV1Storage
    -- Oracle; 4
    Assert Equal (Comptroller PriceOracle) (Address PriceOracle)
    Assert Equal (StorageAt Comptroller 4 0 "address") (Address PriceOracle)
    -- CloseFactorMantissa; 5
    Assert Equal (Comptroller CloseFactor) 0.2
    Assert Equal (StorageAt Comptroller 5 0 "number") 0.2e18
    -- LiquidationIncentiveMantissa; 6
    Assert Equal (Comptroller LiquidationIncentive) 1
    Assert Equal (StorageAt Comptroller 6 0 "number") 1e18
    -- MaxAssets; 7
    Assert Equal (Comptroller MaxAssets) 20
    Assert Equal (StorageAt Comptroller 7 0 "number") 20
    -- AccountAssets; 8 *
    Assert Equal (StorageAt Comptroller 8 0 "number") 0
    Assert Equal (StorageAtMapping Comptroller 8 (Address Geoff) "number") 2
    Assert Equal (StorageAtMapping Comptroller 8 (Address Geoff) "list(address)") [(Address sZRX) (Address sBAT)]
    Assert Equal (Comptroller AssetsIn Geoff) [(Address sZRX) (Address sBAT)]
    -- Markets; 9 *
    Assert Equal (StorageAt Comptroller 9 0 "number") 0
    Assert Equal (StorageAtNestedMapping Comptroller 9 (Address sZRX) Geoff "marketStruct") [True 0.5 True]
    Assert Equal (StorageAtNestedMapping Comptroller 9 (Address sBAT) Geoff "marketStruct") [True 0.4 True]
    Assert Equal (StorageAtNestedMapping Comptroller 9 (Address sBAT) Coburn "marketStruct") [True 0.4 False]
    Assert Equal (Comptroller CollateralFactor sZRX) 0.5
    Assert Equal (Comptroller CollateralFactor sBAT) 0.4
    Assert Equal (Comptroller CheckMembership Geoff sZRX) True
    Assert Equal (Comptroller CheckMembership Geoff sBAT) True

Macro CheckV2Storage
    -- PauseGuardian; 10
    Assert Equal (Comptroller PauseGuardian) (Address Coburn)
    Assert Equal (StorageAt Comptroller 10 0 "address") (Address Coburn)
    -- MintGuardianPaused; 11
    Assert Equal (StorageAt Comptroller 10 40 "bool") False
    Assert Equal (Comptroller _MintGuardianPaused) False
    -- BorrowGuardianPaused; 12
    Assert Equal (StorageAt Comptroller 10 42 "bool") False
    Assert Equal (Comptroller _BorrowGuardianPaused) False
    -- TransferGuardianPaused; 13
    Assert Equal (StorageAt Comptroller 10 44 "bool") False
    From Coburn (Comptroller SetGuardianPaused "Transfer" True)
    Assert Equal (Comptroller TransferGuardianPaused) True
    Assert Equal (StorageAt Comptroller 10 44 "bool") True
    Comptroller SetGuardianPaused "Transfer" False
    -- SeizeGuardianPaused; 14
    Assert Equal (StorageAt Comptroller 10 46 "bool") False
    From Coburn (Comptroller SetGuardianPaused "Seize" True)
    Assert Equal (Comptroller SeizeGuardianPaused) True
    Assert Equal (StorageAt Comptroller 10 46 "bool") True
    Comptroller SetGuardianPaused "Seize" False
    --
    -- Pause by market storage
    --
    -- MintGuardianPaused; 15
    Assert Equal (StorageAtMapping Comptroller 11 (Address sZRX) "bool") False
    From Coburn (Comptroller SetGuardianMarketPaused sZRX "Mint" True)
    Assert Equal (Comptroller MintGuardianMarketPaused sZRX) True
    Assert Equal (StorageAtMapping Comptroller 11 (Address sZRX) "bool") True
    Comptroller SetGuardianMarketPaused sZRX "Mint" False
    -- BorrowGuardianPaused; 16
    Assert Equal (StorageAtMapping Comptroller 12 (Address sZRX) "bool") False
    From Coburn (Comptroller SetGuardianMarketPaused sZRX "Borrow" True)
    Assert Equal (Comptroller BorrowGuardianMarketPaused sZRX) True
    Assert Equal (StorageAtMapping Comptroller 12 (Address sZRX) "bool") True
    Comptroller SetGuardianMarketPaused sZRX "Borrow" False

Macro CheckV3Storage
    -- AllMarkets; 17
    Assert Equal (StorageAt Comptroller 13 0 "number") 2
    -- TODO: StorageAtArray Comptroller 13?
    -- StrikeRate; 18
    Assert Equal (StorageAt Comptroller 14 0 "number") 1e18
    -- StrikeSpeeds; 19
    Assert Equal (StorageAt Comptroller 15 0 "number") 0
    -- StrikeSupplyState; 20
    Assert Equal (StorageAt Comptroller 16 0 "number") 0
    -- StrikeBorrowState; 21
    Assert Equal (StorageAt Comptroller 17 0 "number") 0
    -- StrikeSupplierIndex; 22
    Assert Equal (StorageAt Comptroller 18 0 "number") 0
    -- StrikeBorrowerIndex; 23
    Assert Equal (StorageAt Comptroller 19 0 "number") 0
    -- StrikeAccrued; 24
    Assert Equal (StorageAt Comptroller 20 0 "number") 0

-- Times out coverage, disable for now - ideally set flag to not run in coverage
Pending "Keeps all storage"
    Unitroller Deploy
    PriceOracle Deploy Fixed 1.0
    ComptrollerImpl Deploy StandardG1 ComptrollerG1
    Unitroller SetPendingImpl ComptrollerG1
    ComptrollerImpl ComptrollerG1 BecomeG1 (PriceOracle Address) 0.2 20
    Comptroller SetPendingAdmin Coburn
    ---
    NewSToken ZRX sZRX delegatorType:SErc20Delegator sTokenType:SErc20Delegate
    NewSToken BAT sBAT delegatorType:SErc20Delegator sTokenType:SErc20Delegate
    Give sBAT 10e18 BAT -- Faucet some bat to borrow
    Support sZRX collateralFactor:0.5
    Support sBAT collateralFactor:0.4
    Prep Geoff Some ZRX sZRX
    Mint Geoff 100e18 sZRX
    EnterMarkets Geoff sZRX sBAT
    Borrow Geoff 1e18 sBAT
    --
    CheckUnitrollerStorage (Address ComptrollerG1)
    CheckV1Storage
    --
    ComptrollerImpl Deploy StandardG2 ComptrollerG2
    Unitroller SetPendingImpl ComptrollerG2
    Assert Equal (Unitroller PendingImplementation) (Address ComptrollerG2)
    Assert Equal (StorageAt Comptroller 3 0 "address") (Address ComptrollerG2)
    ComptrollerImpl ComptrollerG2 BecomeG2
    Comptroller SetPauseGuardian Coburn
    --
    CheckUnitrollerStorage (Address ComptrollerG2)
    CheckV1Storage
    CheckV2Storage
    --
    ComptrollerImpl Deploy StandardG3 ComptrollerG3
    Unitroller SetPendingImpl ComptrollerG3
    ComptrollerImpl ComptrollerG3 BecomeG3 1e18 [sZRX sBAT]
    --
    CheckUnitrollerStorage (Address ComptrollerG3)
    CheckV1Storage
    CheckV2Storage
    CheckV3Storage
    --
    ComptrollerImpl Deploy Standard ComptrollerG4
    Unitroller SetPendingImpl ComptrollerG4
    ComptrollerImpl ComptrollerG4 Become
    --
    CheckUnitrollerStorage (Address ComptrollerG4)
    CheckV1Storage
    CheckV2Storage
    CheckV3Storage
